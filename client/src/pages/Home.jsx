import React, { useState, useEffect } from 'react'
import { Card, Loader, FormField } from '../components'

const RenderCard = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />)
  }

  return (
    <h2 className='font-bold mt-5 text-[#6449ff] uppercase'>
      {title}
    </h2>
  )
}

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPost, setAllPost] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null)
  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      try {
        const response = await fetch('http://localhost:8080/api/v1/post', {
          method: 'GET',
          header: {
            'Content-Type': 'application/json'
          }
        })
        if (response.ok) {
          const result = await response.json();
          setAllPost(result.data.reverse())
        }
      } catch (err) {
        alert(err)
      } finally {
        setLoading(false)
      }
    }
    fetchPosts();
  }, [])

  const handleSearchText = (e) => {
    clearTimeout(searchTimeout)

    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPost.filter((item) =>
          item.name.toLowerCase().includes(searchText.toLowerCase()) ||
          item.prompt.toLowerCase().includes(searchText.toLowerCase()))
        setSearchedResults(searchResults)
      }, 500)
    )
  }
  return (
    <section className='max-w-7xl mx-auto'>
      <div>
        <h1 className='font-extrabold text-[#222328] text-[32px]'>
          The Community Showcase
        </h1>
        <p className='mt-2 text-[#666e75] text-[16px] max-w-[800px]'>
          Browse through a collection of imaginative and visually stunning images generated by DALL-E AI
        </p>
      </div>

      <div className='mt-16'>
        <FormField 
          type="text"
          labelName="Search posts"
          name="text"
          placeholder="Search posts"
          value={searchText}
          handleChange={handleSearchText}
        />
      </div>

      <div className='mt-10'>
        {
          loading ? (
            <div className='flex justify-center items-center'>
              <Loader />
            </div>
          ) : (
            <>
              {
                searchText && (
                  <h2 className='font-medium text-[#666e75] text-xl mb-3'>
                    Showing results for <span className='text-[#222328]'>{searchText}</span>
                  </h2>
                )
              }
              <div className='grid lg:grid-cols-4 sm:grid-cols-3 xm:grid-cols-2 grid-cols-1 gap-3'>
                {searchText ? (
                  <RenderCard
                    data={searchedResults}
                    title="No search results found"
                  />
                ) : (
                  <RenderCard
                    data={allPost}
                    title="No Post"
                  />
                )
                }
              </div>
            </>
          )
        }
      </div>

    </section>
  )
}

export default Home
